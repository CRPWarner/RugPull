#pragma once
#define DATA_STRUCTURE_SUPPORT

#include "dominators.dl"
#include "flows.dl"
#include "casts_shifts.dl"

#define MERGED_STORAGE_VAR(storVar,byteLow,byteHigh) cat(storVar, cat("_", cat(to_string(byteLow), cat("_", to_string(byteHigh)))))

// data structure analysis requires better constant folding
// Does constant folding for addition
Variable_Value(resVar, as(@add_256(val0, val1), Value)) :-
  ADD(_, var0, var1, resVar),
  Variable_Value(var0, val0),
  Variable_Value(var1, val1).

.decl LocalAlias(stmt1:Statement, var1:Variable, stmt2:Statement, var2:Variable)

LocalAlias(stmt1, var1, stmt2, var2) :-
  PostDominatesInBlock(stmt2, stmt1),
  Statement_Uses(stmt1, var1, _),
  Statement_Uses(stmt2, var2, _),
  Variable_Value(var1, val),
  Variable_Value(var2, val).
      
.decl KeyToOffset(keyVar:Variable, storeOffsetVar:Variable, keySize: Value)
.decl NestedDataStructure(keyVar:Variable, storeOffsetVar:Variable, keySize: Value)

// keyVar is a variable whose valued is SHA3ed to yield storeOffsetVar
// In the case of an array, only a "fixed" offset is SHA'd
// In the case of a map, a "key" is appended to a "fixed" offset and SHA'd.
// We mostly ignore maps for now as these cannot be iterated
// TODO: use alias analysis to improve soundness/precision

.decl DataStructuresTempStmt(stmt: Statement)

DataStructuresTempStmt(mstoreStmt),
DataStructuresTempStmt(shaStmt),
KeyToOffset(keyVar, storeOffsetVar, keySize) :-
  SHA3(shaStmt, shaStart, keySizeVar, storeOffsetVar),
  LocalAlias(mstoreStmt, shaStart2, shaStmt, shaStart),
  MSTORE(mstoreStmt, shaStart2, keyVar),
  Variable_Value(keySizeVar, keySize),
  DataFlows(storeOffsetVar, index),
  StorageAccessOp(_, index).

// Same, but in this instance storage is not used
DataStructuresTempStmt(mstoreStmt),
DataStructuresTempStmt(shaStmt),
KeyToOffset(keyVar, storeOffsetVar, keySize) :-
  SHA3(shaStmt, shaStart, keySizeVar, storeOffsetVar),
  LocalAlias(mstoreStmt, shaStart2, shaStmt, shaStart),
  MSTORE(mstoreStmt, shaStart2, keyVar),
  Variable_Value(keySizeVar, keySize),
  KeyToOffset(_, _, keySize).


NestedDataStructure(keyVar1, storeOffsetVar2, keySize),
KeyToOffset(keyVar1, storeOffsetVar2, keySize) :-
  KeyToOffset(keyVar1, storeOffsetVar1, _),
  DataFlows(storeOffsetVar1, keyVar2),
  KeyToOffset(keyVar2, storeOffsetVar2, keySize).
//#endif


.decl StorageAccessOp(stmt: Statement, index: Variable)

StorageAccessOp(stmt, index):-
  SSTORE(stmt, index, _) ;
  SLOAD(stmt, index, _).      

.decl ArrayIdToStorageIndex(c:Value, storeOffsetVar:Variable)

// the constant value thatâ€™s SHA3ed to yield storeOffsetVar is c
ArrayIdToStorageIndex(const, storeOffsetVar) :-
   // Remember that the length of a key is the same as the word length (32)
   KeyToOffset(keyVar, storeOffsetVar, "0x20"),
   Variable_Value(keyVar, const).

.decl MapKeyToStorageIndex(keyVar:Variable, storeOffsetVar:Variable)

MapKeyToStorageIndex(keyVar, storeOffsetVar) :-
   KeyToOffset(keyVar, storeOffsetVar, "0x40").

.decl MapIdToStorageIndex(keyVar:Value, storeOffsetVar:Variable)

DataStructuresTempStmt(mstoreStmt),
MapIdToStorageIndex(mapId, storeOffsetVar) :-
   KeyToOffset(_, storeOffsetVar, "0x40"),
   MSTORE(mstoreStmt, mstoreStart, idVar),
   Variable_Value(mstoreStart, "0x20"),
   Statement_Defines(shaStmt, storeOffsetVar, _),
   PostDominatesInBlock(shaStmt, mstoreStmt),
   Variable_Value(idVar, mapId).

.decl MapElementStmt(stmt: Statement, id: Value, keyVar: Variable)

MapElementStmt(stmt, id, keyVar) :-
   (SSTORE(stmt, index, _) ; SLOAD(stmt, index, _)),
   MapIdToStorageIndex(id, index),
   MapKeyToStorageIndex(keyVar, index).

/***
 Map with string keys
****/
DEBUG_OUTPUT(MapElementStmt)

#ifdef MEMORY_MODELING_SUPPORT
MapElementStmt(stmt, mapId, fromArray):-
  (SSTORE(stmt, storeIndex, _) ; SLOAD(stmt, storeIndex, _)),
  SHA3(_, arrVar, _, storeIndex),
  RawDataArrayVar_ClassRep(arrVar, arrId),
  ArrayCopy(_, fromArray, arrId),
  (ArrayStore(_, arrId, mapIdVar); ArrayStoreAtIndex(_, arrId, _, mapIdVar)),
  Variable_Value(mapIdVar, mapId).

MapElementStmt(stmt, mapId, arrId):-
  (SSTORE(stmt, storeIndex, _) ; SLOAD(stmt, storeIndex, _)),
  SHA3(_, dataStartVar, _, storeIndex),
  ArrayDataStartVar(arrVar, dataStartVar),
  VarIsArray(arrVar, arrId),
  (ArrayStore(_, arrId, mapIdVar); ArrayStoreAtIndex(_, arrId, _, mapIdVar)),
  Variable_Value(mapIdVar, mapId).
#endif
                
.decl MapElementElementStmt(stmt: Statement, id: Value, keyVar: Variable, element: Variable)

MapElementElementStmt(stmt, id, keyVar, elementVar) :-
   (SSTORE(stmt, storeIndex, _) ; SLOAD(stmt, storeIndex, _)),
   (ADD(_, index, elementVar, storeIndex) ; ADD(_, elementVar, index, storeIndex)),
   MapIdToStorageIndex(id, index),
   MapKeyToStorageIndex(keyVar, index).

.decl ArrayElementStmt(stmt: Statement, id: Value, indexVar: Variable)

ArrayElementStmt(stmt, id, keyVar) :-
   (SSTORE(stmt, storeIndex, _) ; SLOAD(stmt, storeIndex, _)),
   (ADD(_, index, keyVar, storeIndex) ; ADD(_, keyVar, index, storeIndex)),
   ArrayIdToStorageIndex(id, index).

.decl ArraySizeStmt(stmt:Statement, const:Value)

ArraySizeStmt(stmt, const) :-
  (SLOAD(stmt, index, _) ; SSTORE(stmt, index, _)),
  Variable_Value(index, const),
  ArrayIdToStorageIndex(const, _).

.decl AppendToArray(storeStmt: Statement, const: Value)

AppendToArray(storeStmt, const) :-
  ArrayIdToStorageIndex(const, index),
  Variable_Value(sizeIndex, const),
  SLOAD(_, sizeIndex, size), // TODO check 
  DataFlows(size, newIndex),
  DataFlows(index, newIndex),
  SSTORE(storeStmt, newIndex, _). 

.decl LoadFromDataStructure(stmt: Statement, id: Value, keyVar: Variable, var: Variable)
.output LoadFromDataStructure
.decl StoreToDataStructure(stmt: Statement, id: Value, var: Variable)
.output StoreToDataStructure


LoadFromDataStructure(stmt, id, keyVar, var) :-
   (MapElementStmt(stmt, id, keyVar) ;
    ArrayElementStmt(stmt, id, keyVar) ;
    MapElementElementStmt(stmt, id, keyVar, _)),
  SLOAD(stmt, _, var).


StoreToDataStructure(stmt, id, var) :-
   (MapElementStmt(stmt, id, _) ;
    ArrayElementStmt(stmt, id, _) ;
    MapElementElementStmt(stmt, id, _, _)),
  SSTORE(stmt, _, var).


.decl PossibleArraySizeVariable(resVar:Variable, const:Value)

// resVar is possibly the size of an array identified by const: when reading directly at address const,
// we get the size of an array. When we want its contents, we need to take the SHA3 of const.
PossibleArraySizeVariable(resVar, const) :-
  SLOAD(_, index, resVar),
  Variable_Value(index, const),
  ArrayIdToStorageIndex(const, _).


#ifdef MEMORY_MODELING_SUPPORT
/***
 New Storage Model
 Aims to support arbituary nested data structures
***/

/**
  `StorageIndex` contains information on the data structure used as well as the variables
  used to index/access it, representing the actual low-level index flowing to `SSTORE`/`SLOAD` stmts.
*/
.type StorageIndex = ConstantIndex {value: Value}
                    | ArrayAccessIndex {parIndex: StorageIndex, indexVar: Variable}
                    | ArrayDataStartIndex {parIndex: StorageIndex}
                    | MappingAccessIndex {parIndex: StorageIndex, keyVar: Variable}
                    | OffsetIndex {parIndex: StorageIndex, offset: number}

/**
  `StorageConstruct` contains the information of `StorageIndex`, stripped of indexing/access vars
*/
.type StorageConstruct = Constant {value: Value}
                        | Array {parConstruct: StorageConstruct}
                        | Mapping {parConstruct: StorageConstruct}
                        | Offset {parConstruct: StorageConstruct, offset: number}
                        | Variable {construct: StorageConstruct}

/**
  Syntactic translation of `StorageIndex` to `StorageConstruct`
*/
.decl StorageIndex_StorageConstruct(index: StorageIndex, construct: StorageConstruct)

/**
  Contais all __possible__ storage indexes.
*/
.decl Variable_StorageIndex(var: Variable, construct: StorageIndex)

// Storage indexes that end up flowing to `SSTORE`/`SLOAD` op
.decl ActualStorageIndex(index: StorageIndex)

.decl StorageIndex_ParentIndex(index: StorageIndex, parIndex: StorageIndex)

// Transitive closure over the `StorageIndex_ParentIndex` relation
.decl StorageIndexPredecesor(index: StorageIndex, predIndex: StorageIndex)

// "Final" storage index: used in an `SSTORE`/`SLOAD` op and not to construct a more complex index
.decl UsedStorageIndex(index: StorageIndex)

.decl StorageIndex_HighLevelUses(index: StorageIndex, accessVar: Variable, offset: number, i: number, nestedness: number)

.decl IsStorageConstruct(cons: StorageConstruct)

// StorageConstruct is array or mapping
.decl IsDataStructureConstruct(cons: StorageConstruct)

// Number of elements the value of a data structure has
.decl DataStructure_ElemNum(cons: StorageConstruct, elemNum: number)

.decl DataStructureValueIsStruct(cons: StorageConstruct, structID: symbol, elemNum: number)

// Map `structID` to solidity-like struct definition `stringStruct`
.decl StructToString(structID: symbol, stringStruct: symbol)
.decl StructToStringUpTo(structID: symbol, stringStruct: symbol, upTo: number)

// Note: Can probably be unified with `StorageVariable_Type`
.decl DataStructure_Type(cons: StorageConstruct, type: symbol)
// Note: Can probably be unified with `DataStructure_Type`
.decl StorageVariable_Type(cons: StorageConstruct, type: symbol)

.decl StorageConstruct_ParentAndOffset(cons: StorageConstruct, parentCons: StorageConstruct, offset: number)

/**
  Maps `SSTORE` and `SLOAD` statements to the high-level information:
  - `kind` can be "ACCESS", "LENGTH", "GETDATASTART"
  - `index` can be used to get the high-level uses of the composite storage data structure accesses and writes
  - `construct` is the data structure that is being accessed/written to
*/
.decl StorageStmtToIndexAndConstruct(stmt: Statement, kind: symbol, index: StorageIndex, construct: StorageConstruct)

/**
  Information is containted in the previous relation (`StorageStmtToIndexAndConstruct`).
  Maybe we don't need it, maybe we need more of these?
*/
.decl ArrayLengthStatement(stmt: Statement, index: StorageIndex, cons: StorageConstruct)


DEBUG_OUTPUT(StorageIndex_StorageConstruct)
DEBUG_OUTPUT(ActualStorageIndex)
DEBUG_OUTPUT(UsedStorageIndex)
DEBUG_OUTPUT(Variable_StorageIndex)
DEBUG_OUTPUT(IsStorageConstruct)
DEBUG_OUTPUT(StorageConstruct_ParentAndOffset)
DEBUG_OUTPUT(DataStructure_ElemNum)
DEBUG_OUTPUT(DataStructureValueIsStruct)
DEBUG_OUTPUT(DataStructure_Type)
DEBUG_OUTPUT(StorageVariable_Type)
DEBUG_OUTPUT(StorageIndex_HighLevelUses)
DEBUG_OUTPUT(StorageIndex_ParentIndex)
DEBUG_OUTPUT(StorageStmtToIndexAndConstruct)
DEBUG_OUTPUT(ArrayLengthStatement)

Variable_StorageIndex(var, $ConstantIndex(val)):-
  Variable_Value(var, val).


// REVIEW: Addition does not handle ArrayDataStartIndex
Variable_StorageIndex(def, $OffsetIndex(index, @hex_to_number(const))):-
  Variable_StorageIndex(var, index),
  (index = $ArrayAccessIndex(parentIndex, indexVar); index = $MappingAccessIndex(parentIndex, indexVar)),
  parentIndex = parentIndex, indexVar = indexVar, // suppress warning
  ADDFix(_, var, constVar, def),
  Variable_Value(constVar, const).

Variable_StorageIndex(def, $OffsetIndex(parentIndex, @hex_to_number(const) + oldOffset)):-
  Variable_StorageIndex(var, $OffsetIndex(parentIndex, oldOffset)),
  ADDFix(_, var, constVar, def),
  Variable_Value(constVar, const).

Variable_StorageIndex(def, $MappingAccessIndex(parentIndex, arg1)):-
  Variable_StorageIndex(arg2, parentIndex),
  SHA3_2ARG(_, arg1, arg2, def).

Variable_StorageIndex(def, $MappingAccessIndex(parentIndex, as(arg1, Variable))):-
  Variable_StorageIndex(arg2, parentIndex),
  SHA3_2ARGWithArray(_, arg1, arg2, def).

Variable_StorageIndex(shaDef, $ArrayDataStartIndex(parentIndex)):-
  Variable_StorageIndex(arg, parentIndex),
  SHA3_1ARG(_, arg, shaDef).

Variable_StorageIndex(def, $ArrayAccessIndex(parentIndex, indexVar)):-
  Variable_StorageIndex(var, $ArrayDataStartIndex(parentIndex)),
  ADDFix(_, var, indexTimesConst, def),
  VarTimesConstantNoIdentity(indexVar, _, indexTimesConst).

Variable_StorageIndex(def, $ArrayAccessIndex(parentIndex, indexVar)):-
  Variable_StorageIndex(var, $ArrayDataStartIndex(parentIndex)),
  ADDFix(_, var, indexVar, def),
  !VarTimesConstantNoIdentity(_, _, indexVar).

StorageIndex_StorageConstruct($ConstantIndex(val), $Constant(val)):-
  ActualStorageIndex($ConstantIndex(val)).

StorageIndex_StorageConstruct($ArrayAccessIndex(parentIndex, highLevelIndex), $Array(parentCons)):-
  ActualStorageIndex($ArrayAccessIndex(parentIndex, highLevelIndex)),
  StorageIndex_StorageConstruct(parentIndex, parentCons).

StorageIndex_StorageConstruct($ArrayDataStartIndex(parentIndex), $Array(parentCons)):-
  ActualStorageIndex($ArrayDataStartIndex(parentIndex)),
  StorageIndex_StorageConstruct(parentIndex, parentCons).

StorageIndex_StorageConstruct($MappingAccessIndex(parentIndex, highLevelIndex), $Mapping(parentCons)):-
  ActualStorageIndex($MappingAccessIndex(parentIndex, highLevelIndex)),
  StorageIndex_StorageConstruct(parentIndex, parentCons).

StorageIndex_StorageConstruct($OffsetIndex(parentIndex, offset), $Offset(parentCons, offset)):-
  ActualStorageIndex($OffsetIndex(parentIndex, offset)),
  StorageIndex_StorageConstruct(parentIndex, parentCons).

ActualStorageIndex(index):-
  Variable_StorageIndex(var, index),
  StorageAccessOp(_, var).

ActualStorageIndex(index):-
  PHITrans(var, phiVar),
  Variable_StorageIndex(var, index),
  StorageAccessOp(_, phiVar).

StorageIndex_ParentIndex(index, parentIndex):-
  ActualStorageIndex(index),
  (
    (index = $ArrayAccessIndex(parentIndex, indexVar), indexVar = indexVar); // suppress warning
    (index = $ArrayDataStartIndex(parentIndex));
    (index = $MappingAccessIndex(parentIndex, indexVar), indexVar = indexVar); // suppress warning
    (index = $OffsetIndex(parentIndex, offset), offset = offset) // suppress warning
  ).


StorageIndexPredecesor(index, index):-
  StorageIndex_ParentIndex(index, _);
  StorageIndex_ParentIndex(_, index).

StorageIndexPredecesor(index, predIndex):-
  StorageIndex_ParentIndex(index, predIndex).

StorageIndexPredecesor(index, predIndex):-
  StorageIndex_ParentIndex(index, parentIndex),
  StorageIndexPredecesor(parentIndex, predIndex).

UsedStorageIndex(index):-
  ActualStorageIndex(index),
  !StorageIndex_ParentIndex(_, index).

ActualStorageIndex(parentIndex):-
  ActualStorageIndex(index),
  StorageIndex_ParentIndex(index, parentIndex).

StorageIndex_HighLevelUses(index, accessVar, 0, 0, 1):-
  ActualStorageIndex(index),
  (index = $ArrayAccessIndex($ConstantIndex(const), accessVar); index = $MappingAccessIndex($ConstantIndex(const), accessVar)),
  const = const.

StorageIndex_HighLevelUses(index, otherVar, prevOffset, i, prevNestedness + 1),
StorageIndex_HighLevelUses(index, accessVar, 0, prevNestedness, prevNestedness + 1):-
  ActualStorageIndex(index),
  (index = $ArrayAccessIndex(parIndex, accessVar); index = $MappingAccessIndex(parIndex, accessVar)),
  StorageIndex_HighLevelUses(parIndex, otherVar, prevOffset, i, prevNestedness).

StorageIndex_HighLevelUses($OffsetIndex(parentIndex, offset), accessVar, prevOffset, i, prevNestedness):-
  ActualStorageIndex($OffsetIndex(parentIndex, offset)),
  StorageIndex_HighLevelUses(parentIndex, accessVar, prevOffset, i, prevNestedness),
  i < prevNestedness - 1.

StorageIndex_HighLevelUses($OffsetIndex(parentIndex, offset), accessVar, offset, nestedness - 1, nestedness):-
  ActualStorageIndex($OffsetIndex(parentIndex, offset)),
  StorageIndex_HighLevelUses(parentIndex, accessVar, 0, nestedness - 1, nestedness).

// Don't think we need anything else here. May be wrong.
StorageIndex_HighLevelUses($ArrayDataStartIndex(parentIndex), accessVar, prevOffset, i, prevNestedness):-
  ActualStorageIndex($ArrayDataStartIndex(parentIndex)),
  StorageIndex_HighLevelUses(parentIndex, accessVar, prevOffset, i, prevNestedness).

// StorageIndex_HighLevelUses(index, accessVar, i, prevNestedness + 1):-
//   ActualStorageIndex(index),
//   StorageIndex_ParentIndex(index, parentIndex),
//   StorageIndex_HighLevelUses(parentIndex, accessVar, i, prevNestedness).

IsStorageConstruct($Variable(cons)):-
  UsedStorageIndex(index),
  StorageIndex_StorageConstruct(index, cons).

IsStorageConstruct(cons),
IsDataStructureConstruct(cons):-
  ActualStorageIndex(index),
  StorageIndex_StorageConstruct(index, cons),
  (cons = $Array(parentCons); cons = $Mapping(parentCons)), // filter intermediate constructs
  parentCons = parentCons. // suppress warning

StorageConstruct_ParentAndOffset(cons, paparentCons, offset):-
  IsStorageConstruct(cons),
  (cons = $Array(parentCons); cons = $Mapping(parentCons); cons = $Variable(parentCons)),
  parentCons = $Offset(paparentCons, offset),
  offset = offset. // suppress warning

StorageConstruct_ParentAndOffset(cons, parentCons, 0):-
  IsStorageConstruct(cons),
  (cons = $Array(parentCons); cons = $Mapping(parentCons); cons = $Variable(parentCons)),
  (parentCons = $Array(paparentCons) ; parentCons = $Mapping(paparentCons); parentCons = $Variable(paparentCons)),
  paparentCons = paparentCons. // suppress warning

DataStructure_ElemNum(cons, elemNum):-
  IsDataStructureConstruct(cons),
  elemNum = count : StorageConstruct_ParentAndOffset(_, cons, _).

DataStructureValueIsStruct(cons, cat("struct_", to_string(ord(cons))), elemNum):-
  DataStructure_ElemNum(cons, elemNum),
  elemNum > 1.

StructToStringUpTo(structID, cat("struct ", cat(structID, cat(" { ", decl))), 0):-
  DataStructureValueIsStruct(cons, structID, _),
  StorageConstruct_ParentAndOffset(child, cons, 0),
  (StorageVariable_Type(child, type); DataStructure_Type(child, type)),
  name = "field_0",
  decl = cat(type, cat(" ", cat(name, ";"))).

StructToStringUpTo(structID, cat(prev, cat(" ", decl)), i + 1):-
  DataStructureValueIsStruct(cons, structID, _),
  StructToStringUpTo(structID, prev, i),
  StorageConstruct_ParentAndOffset(child, cons, i + 1),
  (StorageVariable_Type(child, type); DataStructure_Type(child, type)),
  name = cat("field_", to_string(i + 1)),
  decl = cat(type, cat(" ", cat(name, ";"))).

StructToString(structID, cat(prev, " }")):-
  DataStructureValueIsStruct(_, structID, elemNum),
  StructToStringUpTo(structID, prev, elemNum - 1).

DataStructure_Type(cons, cat("mapping (uint256 => ", cat(type, ")"))):-
  DataStructure_ElemNum(cons, 1),
  StorageConstruct_ParentAndOffset($Variable(cons), cons, 0),
  StorageVariable_Type($Variable(cons), type),
  cons = $Mapping(parentCons), parentCons = parentCons.

DataStructure_Type(cons, cat("mapping (uint256 => ", cat(structID, ")"))):-
  DataStructureValueIsStruct(cons, structID, _),
  cons = $Mapping(parentCons), parentCons = parentCons.

DataStructure_Type(cons, cat("mapping (uint256 => ", cat(type, ")"))):-
  DataStructure_ElemNum(cons, 1),
  StorageConstruct_ParentAndOffset(child, cons, 0),
  DataStructure_Type(child, type),
  cons = $Mapping(parentCons), parentCons = parentCons.

DataStructure_Type(cons, "uint256[]"):-
  DataStructure_ElemNum(cons, 1),
  StorageConstruct_ParentAndOffset($Variable(cons1), cons, 0), cons1 = cons1,
  cons = $Array(parentCons), parentCons = parentCons.

DataStructure_Type(cons, cat(structID, "[]")):-
  DataStructureValueIsStruct(cons, structID, _),
  cons = $Array(parentCons), parentCons = parentCons.

DataStructure_Type(cons, cat(type, "[]")):-
  DataStructure_ElemNum(cons, 1),
  StorageConstruct_ParentAndOffset(child, cons, 0),
  DataStructure_Type(child, type),
  cons = $Array(parentCons), parentCons = parentCons.

StorageVariable_Type(var, "uint256"):-
  IsStorageConstruct(var),
  var = $Variable(cons), cons = cons.

// // Disable general rule for now
// StorageStmtToIndexAndConstruct(stmt, "ACCESS", index, $Variable(cons)):-
//   UsedStorageIndex(index),
//   StorageIndex_StorageConstruct(index, cons),
//   PHITrans(var, phiVar),
//   Variable_StorageIndex(var, index),
//   StorageAccessOp(stmt, phiVar).

StorageStmtToIndexAndConstruct(stmt, "GETDATASTART", $ArrayDataStartIndex(parIndex), cons):-
  UsedStorageIndex($ArrayDataStartIndex(parIndex)),
  StorageIndex_StorageConstruct($ArrayDataStartIndex(parIndex), cons),
  Variable_StorageIndex(var, $ArrayDataStartIndex(parIndex)),
  PHITrans(var, phiVar),
  StorageAccessOp(_, phiVar),
  Statement_Defines(stmt, var, _).

StorageStmtToIndexAndConstruct(stmt, "ACCESS", index, $Variable(cons)):-
  UsedStorageIndex(index),
  StorageIndex_StorageConstruct(index, cons),
  Variable_StorageIndex(var, index),
  StorageAccessOp(stmt, var).

.decl StorageOffset_Type(offset: Value, type: symbol)

StorageOffset_Type(offset, type):-
  DataStructure_Type(cons, type),
  (cons = $Array(parentCons); cons = $Mapping(parentCons)),
  parentCons = $Constant(offset).

StorageStmtToIndexAndConstruct(stmt, "LENGTH", index, $Array(cons)),
ArrayLengthStatement(stmt, index, $Array(cons)):-
  StorageAccessOp(stmt, var),
  Variable_StorageIndex(var, index),
  ActualStorageIndex(index),
  StorageIndex_StorageConstruct(index, cons),
  IsStorageConstruct($Array(cons)).

/**
  METRICS
*/
.decl NewModelKnownLoad(stmt: Statement, cons: StorageIndex)
.decl NewModelKnownStore(stmt: Statement, cons: StorageIndex)

NewModelKnownLoad(store, cons):-
  SLOAD(store, index, _),
  ( Variable_StorageIndex(index, cons);
    (PHITrans(var, index),
  Variable_StorageIndex(var, cons))).

NewModelKnownStore(store, cons):-
  SSTORE(store, index, _),
  ( Variable_StorageIndex(index, cons);
    (PHITrans(var, index),
  Variable_StorageIndex(var, cons))).


//METRICS


.decl Verbatim_NewModelKnownAndAllStores(known:number, all:number)
.output Verbatim_NewModelKnownAndAllStores

.decl Verbatim_NewModelKnownAndAllLoads(known:number, all:number)
.output Verbatim_NewModelKnownAndAllLoads

Verbatim_NewModelKnownAndAllStores(known, all):-
  known = count: NewModelKnownStore(_, _),
  all = count: SSTORE(_, _, _).

Verbatim_NewModelKnownAndAllLoads(known, all):-
  known = count: NewModelKnownLoad(_, _),
  all = count: SLOAD(_, _, _).


.decl Analytics_NonModeledSSTORE(sstore: Statement)
.output Analytics_NonModeledSSTORE

.decl Analytics_NonModeledSLOAD(sload: Statement)
.output Analytics_NonModeledSLOAD

Analytics_NonModeledSSTORE(store):-
  SSTORE(store, _, _),
  !NewModelKnownStore(store, _).

Analytics_NonModeledSLOAD(load):-
  SLOAD(load, _, _),
  !NewModelKnownLoad(load, _).

.decl NewModelAllStoresKnown()

.decl NewModelAllLoadsKnown()

.decl NewModelAllStorageOpsKnown()

.decl NewModelHasStorageOpsUnknown()

NewModelAllStoresKnown():-
  Verbatim_NewModelKnownAndAllStores(all, all).

NewModelAllLoadsKnown():-
  Verbatim_NewModelKnownAndAllLoads(all, all).  

NewModelAllStorageOpsKnown():-
  NewModelAllLoadsKnown(),
  NewModelAllStoresKnown().

NewModelHasStorageOpsUnknown():-
  !NewModelAllStorageOpsKnown().

#endif

.decl BytesOrStringLength(storVar:symbol, lenVar:Variable)

BytesOrStringLength(storVar, lenVar):-
  VarHoldsBytesOfStorVar(storLoad, _, storVar, 0, 31),
  (AND(_, storLoad, oneVar, lastBitVar) ; AND(_, oneVar, storLoad, lastBitVar)),
  Variable_Value(oneVar, "0x1"),
  ISZERO(_, lastBitVar, notLastBitVar),
  LShiftBytes(notLastBitVar, shifted, 1),
  SUB(_, shifted, otherOneVar, minOne),
  Variable_Value(otherOneVar, "0x1"),
  (AND(_, minOne, storLoad, almost) ; AND(_, storLoad, minOne, almost)),
  DIV(_, almost, twoVar, lenVar),
  Variable_Value(twoVar, "0x2").


.decl KnownLoad(stmt: Statement, addr: Value, var: Variable)

KnownLoad(stmt, addr, var) :-
  LoadFromDataStructure(stmt, addr, _, var).

KnownLoad(stmt, constaddr, src) :-
  SLOADOfConst(stmt, constaddr, src).

.decl KnownStore(stmt: Statement, addr: Value, var: Variable)

KnownStore(stmt, addr, var) :-
  StoreToDataStructure(stmt, addr, var).

KnownStore(stmt, constaddr, src) :-
  SSTOREToConst(stmt, constaddr, src).

.decl SLOADOfConst(sload:Statement, const:Value, var:Variable)
.decl SSTOREToConst(sstore:Statement, const:Value, var:Variable)

SLOADOfConst(sload, const, var):-
  SLOAD(sload, constVar, var),
  Variable_Value(constVar, const).

SSTOREToConst(sstore, const, var):-
  SSTORE(sstore, constVar, var),
  Variable_Value(constVar, const).


/**
  __Note__: Contains both top-level global variables and storage constructs as they
  both need the same handling for word sharing in storage slots. They are differentiated later.
*/
.decl VarHoldsBytesOfStorVar(var: Variable, srcLoad: Statement, storVar: symbol, byteLow: number, byteHigh: number)

/**
  This is a heuristic, we use the "Final" forms of loaded vars
  (seeing when a variable from storage is no longer shifted or masked)
  to see that the limits of merged variables are modeled correctly
  but then any VarHoldsBytesOfStorVar corresponding to a valid variable
  is considered a LOAD of that variable.

  __Note__: Contains both top-level global variables and storage constructs as they
  both need the same handling for word sharing in storage slots. They are differentiated later.
*/
.decl VarHoldsBytesOfStorVarFinal(var: Variable, srcLoad: Statement, storVar: symbol, byteLow: number, byteHigh: number)

VarHoldsBytesOfStorVar(to, load, storVar, 0, 31):-
  SLOADOfConst(load, storVar, to).

// VarHoldsBytesOfStorVar(to, sload, index, 0, 31):-
//   SLOAD(sload, indexVar, to),
//   Variable_StorageIndex(indexVar, index),
//   IsStorageConstruct(["VAR", index]).

VarHoldsBytesOfStorVar(to, load, storVar, low + bytes, high):-
  VarHoldsBytesOfStorVar(shiftedVar, load, storVar, low, high),
  RShiftBytes(shiftedVar, to, bytes).

VarHoldsBytesOfStorVar(to, load, storVar, low, newHigh):-
  VarHoldsBytesOfStorVar(var, load, storVar, low, high),
  newHigh = min(high, low + maskLen - 1),
  LowBytesMaskOp(var, to, maskLen).


VarHoldsBytesOfStorVarFinal(var, load, storVar, low, high):-
  VarHoldsBytesOfStorVar(var, load, storVar, low, high),
  //!LShiftBytes(var, _, _),
  !RShiftBytes(var, _, _),
  !LowBytesMaskOp(var, _, _),
  !AntiMaskOp(var, _, _, _).

.decl AnyLoadStoreStorVarBytes(loadOrStore: Statement, storVar: symbol, low: number, high: number)

.decl FailedMergedStorageModeling(storVar: symbol)
DEBUG_OUTPUT(FailedMergedStorageModeling)

.decl SuccessfulMergedStorageModeling(storVar: symbol)
DEBUG_OUTPUT(SuccessfulMergedStorageModeling)

.decl LoadOrStoreToStoreVar(stmt: Statement, storVar: symbol)

AnyLoadStoreStorVarBytes(stmt, storVar, low, high):-
  VarHoldsBytesOfStorVarFinal(_, stmt, storVar, low, high);
  VarWrittenToBytesOfStorVar(_, stmt, _, storVar, low, high);
  ConstWrittenToBytesOfStorVar(_, _, stmt, _, storVar, low, high).

AnyLoadStoreStorVarBytes(stmt, storVar, 0, 31):-
  SSTOREToConst(stmt, storVar, _),
  !SLOADOfConst(_, storVar, _).

FailedMergedStorageModeling(storVar):-
  AnyLoadStoreStorVarBytes(_, storVar, low, high),
  AnyLoadStoreStorVarBytes(_, storVar, otherLow, otherHigh),  otherLow = otherLow, otherHigh = otherHigh, // NOWARN
  !ArrayIdToStorageIndex(as(storVar, Value), _),
  (low != otherLow ; high != otherHigh),
  ( (low < otherLow , otherLow < high) ; (low < otherHigh, otherHigh < high) ).

LoadOrStoreToStoreVar(stmt, storVar):-
  SLOADOfConst(stmt, storVar, _);
  SSTOREToConst(stmt, storVar, _).

FailedMergedStorageModeling(storVar):-
  AnyLoadStoreStorVarBytes(_, storVar, _, _),
  LoadOrStoreToStoreVar(stmt, storVar),
  !AnyLoadStoreStorVarBytes(stmt, storVar, _, _),
  !VarWrittenToBytesOfStorVar(_, _, stmt, storVar, _, _),
  !ConstWrittenToBytesOfStorVar(_, _, _, stmt, storVar, _, _),
  !ArrayIdToStorageIndex(as(storVar, Value), _).


SuccessfulMergedStorageModeling(storVar):-
  AnyLoadStoreStorVarBytes(_, storVar, _, _),
  !FailedMergedStorageModeling(storVar),
  !ArrayIdToStorageIndex(as(storVar, Value), _).

.decl VarWrittenToBytesOfStorVar(var:Variable, store:Statement, load:Statement, storVar:symbol, byteLow:number, byteHigh:number)

.decl VarWrittenToBytesOfStorVarIsMergedVar(var:Variable, modeledVar:Variable, store:Statement, load:Statement, storVar:symbol, byteLow:number, byteHigh:number)

.decl VarWrittenToBytesOfStorVarFinal(var:Variable, store:Statement, load:Statement, storVar:symbol, byteLow:number, byteHigh:number)

.decl ConstWrittenToBytesOfStorVar(constVar:Variable, const:Value, store:Statement, load:Statement, storVar:symbol, byteLow:number, byteHigh:number)

VarWrittenToBytesOfStorVar(writtenVar, store, load, storVar, byteLow, byteHigh):-
  VarHoldsBytesOfStorVar(originVar, load, storVar, 0, 31),
  AntiMaskOp(originVar, oldMasked, byteLow, byteHigh),
  CastedAndShiftedVar(writtenVar, toVar, byteLow, byteHigh - byteLow + 1),
  (OR(_, toVar, oldMasked, storedVar) ; OR(_, oldMasked, toVar, storedVar)),
  SSTOREToConst(store, storVar, storedVar).

VarWrittenToBytesOfStorVar(writtenVar, store, load, storVar, 0, byteHigh):-
  VarHoldsBytesOfStorVar(originVar, load, storVar, 0, 31),
  AntiMaskOp(originVar, oldMasked, 0, byteHigh),
  LowBytesMaskOp(writtenVar, toVar, byteHigh + 1),
  (OR(_, toVar, oldMasked, storedVar) ; OR(_, oldMasked, toVar, storedVar)),
  SSTOREToConst(store, storVar, storedVar).

/**
 Special case to fix a bug when writting from one storage location to another,
**/
VarWrittenToBytesOfStorVarIsMergedVar(writtenVar, modeledVar, store, load, storVar, 0, byteHigh):-
  VarWrittenToBytesOfStorVar(writtenVar, store, load, storVar, 0, byteHigh),
  Statement_Defines(otherLoad, writtenVar, 0),
  VarHoldsBytesOfStorVar(modeledVar, otherLoad, _, 0, byteHigh),
  Statement_Uses(store, storedVar, 1),
  DataFlows(modeledVar, storedVar).

VarWrittenToBytesOfStorVarFinal(modeledVar, store, load, storVar, byteLow, byteHigh):-
  VarWrittenToBytesOfStorVar(writtenVar, store, load, storVar, byteLow, byteHigh),
  VarWrittenToBytesOfStorVarIsMergedVar(writtenVar, modeledVar, store, load, storVar, byteLow, byteHigh).

VarWrittenToBytesOfStorVarFinal(writtenVar, store, load, storVar, byteLow, byteHigh):-
  VarWrittenToBytesOfStorVar(writtenVar, store, load, storVar, byteLow, byteHigh),
  !VarWrittenToBytesOfStorVarIsMergedVar(writtenVar, _, store, load, storVar, byteLow, byteHigh).


ConstWrittenToBytesOfStorVar(constVar, as(@shr_256(@number_to_hex(byteLow * 8), const), Value), store, load, storVar, byteLow, byteHigh):-
  VarHoldsBytesOfStorVar(originVar, load, storVar, 0, 31),
  AntiMaskOp(originVar, oldMasked, byteLow, byteHigh),
  (OR(_, constVar, oldMasked, storedVar) ; OR(_, oldMasked, constVar, storedVar)),
  Variable_Value(constVar, const),
  SSTOREToConst(store, storVar, storedVar),
  !VarWrittenToBytesOfStorVar(_, store, _, storVar, _, _).

ConstWrittenToBytesOfStorVar("0xNoVar", "0x0", store, load, storVar, byteLow, byteHigh):-
  VarHoldsBytesOfStorVar(originVar, load, storVar, 0, 31),
  AntiMaskOp(originVar, storedVar, byteLow, byteHigh),
  SSTOREToConst(store, storVar, storedVar).

/**
  HACK (?) HACK (?) HACK (?)
  If the variable that is being stored on the update of a merged storage var
  is used again, we consider it a fresh "load" of the storage var
  its' shifts and masks populate VarHoldsBytesOfStorVar
  This can happen in optimized code, its good to support it.
**/

VarHoldsBytesOfStorVar(to, store, storVar, bytes, 31):-
  VarWrittenToBytesOfStorVar(_, store, _, storVar, _, _),
  Statement_Uses(store, storedVar, 1),
  RShiftBytes(storedVar, to, bytes).

VarHoldsBytesOfStorVar(to, store, storVar, 0, maskLen - 1):-
  VarWrittenToBytesOfStorVar(_, store, _, storVar, _, _),
  Statement_Uses(store, storedVar, 1),
  LowBytesMaskOp(storedVar, to, maskLen).

/**
  Top-Level Global Variables
 */

.decl GlobalVariable(v: Value)

.decl LoadGlobalVariable(stmt: Statement, val: Value, var: Variable)

.decl StoreGlobalVariable(stmt: Statement, val: Value, var: Variable)

.decl StorageVariableInfo(storageVariable: symbol, storageSlot: symbol, byteLow: number, byteHigh: number)


/* Old logic
GlobalVariable(v) :-
  SLOAD(_, index, _),
  Variable_Value(index, v).
*/

GlobalVariable(v):-
  LoadGlobalVariable(_, v, _) ;
  StoreGlobalVariable(_, v, _).


LoadGlobalVariable(stmt, storVar, var):-
  SLOADOfConst(stmt, storVar, var),
  FailedMergedStorageModeling(storVar).

LoadGlobalVariable(stmt, as(storVar, Value), var):-
  SuccessfulMergedStorageModeling(storVar),
  SLOADOfConst(_, storVar, _), // ensure it's a global variable
  VarHoldsBytesOfStorVarFinal(var, _, storVar, 0, 31),
  Statement_Defines(stmt, var, 0).

LoadGlobalVariable(stmt, v, var):-
  SuccessfulMergedStorageModeling(storVar),
  SLOADOfConst(_, storVar, _), // ensure it's a global variable
  VarHoldsBytesOfStorVarFinal(_, _, storVar, low, high),
  VarHoldsBytesOfStorVar(var, _, storVar, low, high),
  Statement_Defines(stmt, var, 0),
  (low != 0 ; high != 31),
  v = MERGED_STORAGE_VAR(storVar, low, high).

StoreGlobalVariable(stmt, storVar, var):-
  SSTOREToConst(stmt, storVar, var),
  FailedMergedStorageModeling(storVar).

StoreGlobalVariable(stmt, storVar, var):-
  SSTOREToConst(stmt, storVar, var),
  SuccessfulMergedStorageModeling(storVar),
  (VarHoldsBytesOfStorVarFinal(_, _, storVar, 0, 31); !SLOADOfConst(_, storVar, _)).

StoreGlobalVariable(store, v, writtenVar):-
  SuccessfulMergedStorageModeling(storVar),
  SSTOREToConst(_, storVar, _), // ensure it's a global variable
  VarWrittenToBytesOfStorVarFinal(writtenVar, store, _, storVar, byteLow, byteHigh),
  v = MERGED_STORAGE_VAR(storVar, byteLow, byteHigh).

StoreGlobalVariable(store, v, constVar):-
  SuccessfulMergedStorageModeling(storVar),
  SSTOREToConst(_, storVar, _), // ensure it's a global variable
  ConstWrittenToBytesOfStorVar(constVar, _, store, _, storVar, byteLow, byteHigh),
  v = MERGED_STORAGE_VAR(storVar, byteLow, byteHigh).

StorageVariableInfo(MERGED_STORAGE_VAR(storVar, byteLow, byteHigh), storVar, byteLow, byteHigh):-
  SuccessfulMergedStorageModeling(storVar),
  (
    ConstWrittenToBytesOfStorVar(_, _, _, _, storVar, byteLow, byteHigh);
    VarWrittenToBytesOfStorVarFinal(_, _, _, storVar, byteLow, byteHigh);
    VarHoldsBytesOfStorVarFinal(_, _, storVar, byteLow, byteHigh)
  ),
  byteHigh - byteLow != 31.

StorageVariableInfo(storVar, storVar, 0, 31):-
  SuccessfulMergedStorageModeling(storVar),
  (
    ConstWrittenToBytesOfStorVar(_, _, _, _, storVar, 0, 31);
    VarWrittenToBytesOfStorVarFinal(_, _, _, storVar, 0, 31);
    VarHoldsBytesOfStorVarFinal(_, _, storVar, 0, 31)
  ).

StorageVariableInfo(storVar, storVar, 0, 31):-
  FailedMergedStorageModeling(storVar).

/**
  Basic type inference
  Hacky for now just to print the correct uintX or address if nessesary.
**/

.decl StorageVariableType(storVar:symbol, type:symbol)

.decl SpecialStorageVariableType(storVar:symbol, type:symbol)

StorageVariableType(storVar, type):-
  StorageVariableInfo(storVar, _, byteLow, byteHigh),
  widthBytes = 1 + byteHigh - byteLow,
  !SpecialStorageVariableType(storVar, _),
  type = cat("uint", to_string(widthBytes * 8)).

StorageVariableType(storVar, type):-
  StorageVariableInfo(storVar, _, _, _),
  SpecialStorageVariableType(storVar, type).

SpecialStorageVariableType(storVar, "address"):-
  StorageVariableInfo(storVar, originStorVar, byteLow, byteHigh),
  VarHoldsBytesOfStorVarFinal(var, _, originStorVar, byteLow, byteHigh),
  widthBytes = 1 + byteHigh - byteLow,
  widthBytes = 20,
  DataFlows(var, addr),
  AddressTypedVar(addr).

SpecialStorageVariableType(storVar, "address"):-
  StorageVariableInfo(storVar, originStorVar, byteLow, byteHigh),
  VarWrittenToBytesOfStorVarFinal(var, _, _, originStorVar, byteLow, byteHigh),
  widthBytes = 1 + byteHigh - byteLow,
  widthBytes = 20,
  DataFlows(addr, var),
  AddressTypedVar(addr).

// Hack to cover msg.sender == var and other similar things
SpecialStorageVariableType(storVar, "address"):-
  AddressTypedVar(addrFrom),
  DataFlows(addrFrom, addr),
  (EQ(_, otherAddr, addr, _) ; EQ(_, addr, otherAddr, _)),
  DataFlows(var, otherAddr),
  VarHoldsBytesOfStorVarFinal(var, _, originStorVar, byteLow, byteHigh),
  StorageVariableInfo(storVar, originStorVar, byteLow, byteHigh),
  widthBytes = 1 + byteHigh - byteLow,
  widthBytes = 20.

.decl AddressTypedVar(addrVar:Variable)
AddressTypedVar(addr):-
  CALL(_, _, addr, _, _, _, _, _, _);
  STATICCALL(_, _, addr, _, _, _, _, _);
  DELEGATECALL(_, _, addr, _, _, _, _, _);
  SELFDESTRUCT(_, addr);
  EXTCODECOPY(_, addr, _, _, _);
  EXTCODESIZE(_, addr, _);
  EXTCODEHASH(_, addr, _);
  CALLER(_, addr);
  ORIGIN(_, addr);
  ADDRESS(_, addr).

/**
  Temp statements for the source decompiler to hide
**/

DataStructuresTempStmt(load):-
  SuccessfulMergedStorageModeling(storVar),
  VarHoldsBytesOfStorVarFinal(var, load, storVar, _, _),
  Statement_Defines(stmt, var, 0),
  stmt != load.

/**
 METRICS
**/

.decl IsKnownLoad(stmt:Statement)

.decl IsKnownStore(stmt:Statement)

IsKnownStore(stmt):-
  KnownStore(stmt, _, _).

IsKnownLoad(stmt):-
  KnownLoad(stmt, _, _).


.decl Verbatim_KnownAndAllStores(known:number, all:number)
.output Verbatim_KnownAndAllStores

.decl Verbatim_KnownAndAllLoads(known:number, all:number)
.output Verbatim_KnownAndAllLoads

Verbatim_KnownAndAllStores(known, all):-
  known = count: IsKnownStore(_),
  all = count: SSTORE(_, _, _).

Verbatim_KnownAndAllLoads(known, all):-
  known = count: IsKnownLoad(_),
  all = count: SLOAD(_, _, _).

.decl AllStoresKnown()

.decl AllLoadsKnown()

.decl AllStorageOpsKnown()

.decl HasStorageOpsUnknown()

AllStoresKnown():-
  Verbatim_KnownAndAllStores(all, all).

AllLoadsKnown():-
  Verbatim_KnownAndAllLoads(all, all).  

AllStorageOpsKnown():-
  AllLoadsKnown(),
  AllStoresKnown().

HasStorageOpsUnknown():-
  !AllStorageOpsKnown().
